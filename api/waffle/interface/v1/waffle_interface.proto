syntax = "proto3";

package waffle.interface.v1;

import "google/api/annotations.proto";

option go_package = "api/waffle/interface/v1;v1";


service WaffleInterface {

  //user
  rpc Register (RegisterReq) returns (RegisterReply) {
    option (google.api.http) = {
      post: "/v1/register"
      body: "*"
    };
  }

  rpc Login (LoginReq) returns (LoginReply) {
    option (google.api.http) = {
      post: "/v1/login"
      body: "*"
    };
  }

  rpc Logout (LogoutReq) returns (LogoutReply) {
    option (google.api.http) = {
      post: "/v1/logout"
      body: "*"
    };
  }

  rpc Ping (PingReq) returns (PingReply) {
    option (google.api.http) = {
      post: "/v1/Ping"
      body: "*"
    };
  }

  rpc PingRPC(PingRPCReq) returns (PingRPCReply){
    option (google.api.http) = {
      post: "/v1/PingRPC"
      body: "*"
    };
  }

  // media
  rpc GenerateUploadImgUrl(GenerateUploadImgUrlReq) returns (GenerateUploadImgUrlReply){
    option (google.api.http) = {
      post: "/v1/GenerateUploadImgUrl"
      body: "*"
    };
  }

  rpc GenerateUploadAvatarUrl(GenerateUploadAvatarUrlReq)returns(GenerateUploadAvatarUrlReply){
    option (google.api.http) = {
      post: "/v1/GenerateUploadAvatarUrl"
      body: "*"
    };
  }

  rpc VerifyImagesUpload(VerifyImagesUploadReq)returns(VerifyImagesUploadReply){
    option (google.api.http) = {
      post: "/v1/VerifyImagesUpload"
      body: "*"
    };
  }

  rpc VerifyAvatarUpload(VerifyAvatarUploadReq)returns(VerifyAvatarUploadReply){
    option (google.api.http) = {
      post: "/v1/VerifyAvatarUpload"
      body: "*"
    };
  }

  rpc GetImage(GetImageReq)returns(GetImageReply){
    option (google.api.http) = {
      get: "/v1/w/{uid}"
    };
  }

  // image - tag
  rpc AddImageTag(AddImageTagReq)returns(AddImageTagReply){
    option (google.api.http) = {
      post: "/v1/AddImageTag"
      body: "*"
    };
  }
  rpc SearchImageTagByNameLike(SearchImageTagByNameLikeReq)returns(SearchImageTagByNameLikeReply){
    option (google.api.http) = {
      post: "/v1/SearchImageTagByNameLike"
      body: "*"
    };
  }
  rpc ReloadCategoryRedisImageTag(ReloadCategoryRedisImageTagReq)returns(ReloadCategoryRedisImageTagReply){
    option (google.api.http) = {
      post: "/v1/ReloadCategoryRedisImageTag"
      body: "*"
    };
  }
}

message RegisterReq {
  string username = 1;
  string password = 2;
}

message RegisterReply {
  uint64 id = 1;
}

message LoginReq {
  string username = 1;
  string password = 2;
}

message LoginReply {
  string token = 1;
}

message LogoutReq {

}

message LogoutReply {

}

message PingReq {

}

message PingReply {
  string message = 1;
}

message PingRPCReq {

}

message PingRPCReply {
  string message = 1;
}

message GenerateUploadImgUrlReq {
  repeated string image_name = 1;
}

message GenerateUploadImgUrlReply {
  message Image {
    string upload_url = 1;
    string image_name = 2;
    string image_uuid = 3;
  }
  repeated Image result = 1;
}

message GenerateUploadAvatarUrlReq {
  string image_name = 1;
}

message GenerateUploadAvatarUrlReply {
  string upload_url = 1;
  string avatar_name = 2;
  string avatar_uuid = 3;
}

message VerifyImagesUploadReq {
  message Info {
    string image_name = 1;
    string image_uuid = 2;
    string category = 3;
    string purity = 4;
    repeated uint64 tags = 5;
  }
  repeated Info image_info = 1;
}

message VerifyImagesUploadReply {
  string message = 1;
}

message VerifyAvatarUploadReq {
  string avatar_name = 1;
  string avatar_uuid = 2;
}

message VerifyAvatarUploadReply {
  string upload_url = 1;
}

message GetImageReq {
  string uid = 1;
}

message GetImageReply {
  message Uploader {
    uint64 id = 1;
    string avatar_url = 2;
  }
  message Info {
    string name = 1;
    string category = 2;
    string purity = 3;
    int64 size = 4;
    int64 views = 5;
    string url = 6;
    string uid = 7;
    repeated string tags = 8;
  }
  Uploader uploader = 1;
  Info info = 2;
}

// image -tag
message AddImageTagReq{
  string name = 1;
  string parentName = 2;
}

message AddImageTagReply{
}

message SearchImageTagByNameLikeReq{
  string name = 1;
}

message SearchImageTagByNameLikeReply{
  message Tags {
    string name = 1;
    int64 id =2;
  }
  repeated Tags tags = 1;
}

message ReloadCategoryRedisImageTagReq{}

message ReloadCategoryRedisImageTagReply{}