// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: v1/waffle_interface.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WaffleInterface_Register_FullMethodName                    = "/waffle.interface.v1.WaffleInterface/Register"
	WaffleInterface_Login_FullMethodName                       = "/waffle.interface.v1.WaffleInterface/Login"
	WaffleInterface_Logout_FullMethodName                      = "/waffle.interface.v1.WaffleInterface/Logout"
	WaffleInterface_Ping_FullMethodName                        = "/waffle.interface.v1.WaffleInterface/Ping"
	WaffleInterface_PingRPC_FullMethodName                     = "/waffle.interface.v1.WaffleInterface/PingRPC"
	WaffleInterface_GenerateUploadImgUrl_FullMethodName        = "/waffle.interface.v1.WaffleInterface/GenerateUploadImgUrl"
	WaffleInterface_GenerateUploadAvatarUrl_FullMethodName     = "/waffle.interface.v1.WaffleInterface/GenerateUploadAvatarUrl"
	WaffleInterface_VerifyImagesUpload_FullMethodName          = "/waffle.interface.v1.WaffleInterface/VerifyImagesUpload"
	WaffleInterface_VerifyAvatarUpload_FullMethodName          = "/waffle.interface.v1.WaffleInterface/VerifyAvatarUpload"
	WaffleInterface_GetImage_FullMethodName                    = "/waffle.interface.v1.WaffleInterface/GetImage"
	WaffleInterface_AddImageTag_FullMethodName                 = "/waffle.interface.v1.WaffleInterface/AddImageTag"
	WaffleInterface_SearchImageTagByNameLike_FullMethodName    = "/waffle.interface.v1.WaffleInterface/SearchImageTagByNameLike"
	WaffleInterface_ReloadCategoryRedisImageTag_FullMethodName = "/waffle.interface.v1.WaffleInterface/ReloadCategoryRedisImageTag"
)

// WaffleInterfaceClient is the client API for WaffleInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WaffleInterfaceClient interface {
	//user
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error)
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingReply, error)
	PingRPC(ctx context.Context, in *PingRPCReq, opts ...grpc.CallOption) (*PingRPCReply, error)
	// media
	GenerateUploadImgUrl(ctx context.Context, in *GenerateUploadImgUrlReq, opts ...grpc.CallOption) (*GenerateUploadImgUrlReply, error)
	GenerateUploadAvatarUrl(ctx context.Context, in *GenerateUploadAvatarUrlReq, opts ...grpc.CallOption) (*GenerateUploadAvatarUrlReply, error)
	VerifyImagesUpload(ctx context.Context, in *VerifyImagesUploadReq, opts ...grpc.CallOption) (*VerifyImagesUploadReply, error)
	VerifyAvatarUpload(ctx context.Context, in *VerifyAvatarUploadReq, opts ...grpc.CallOption) (*VerifyAvatarUploadReply, error)
	GetImage(ctx context.Context, in *GetImageReq, opts ...grpc.CallOption) (*GetImageReply, error)
	// image - tag
	AddImageTag(ctx context.Context, in *AddImageTagReq, opts ...grpc.CallOption) (*AddImageTagReply, error)
	SearchImageTagByNameLike(ctx context.Context, in *SearchImageTagByNameLikeReq, opts ...grpc.CallOption) (*SearchImageTagByNameLikeReply, error)
	ReloadCategoryRedisImageTag(ctx context.Context, in *ReloadCategoryRedisImageTagReq, opts ...grpc.CallOption) (*ReloadCategoryRedisImageTagReply, error)
}

type waffleInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewWaffleInterfaceClient(cc grpc.ClientConnInterface) WaffleInterfaceClient {
	return &waffleInterfaceClient{cc}
}

func (c *waffleInterfaceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, WaffleInterface_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waffleInterfaceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, WaffleInterface_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waffleInterfaceClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, WaffleInterface_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waffleInterfaceClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingReply)
	err := c.cc.Invoke(ctx, WaffleInterface_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waffleInterfaceClient) PingRPC(ctx context.Context, in *PingRPCReq, opts ...grpc.CallOption) (*PingRPCReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingRPCReply)
	err := c.cc.Invoke(ctx, WaffleInterface_PingRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waffleInterfaceClient) GenerateUploadImgUrl(ctx context.Context, in *GenerateUploadImgUrlReq, opts ...grpc.CallOption) (*GenerateUploadImgUrlReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateUploadImgUrlReply)
	err := c.cc.Invoke(ctx, WaffleInterface_GenerateUploadImgUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waffleInterfaceClient) GenerateUploadAvatarUrl(ctx context.Context, in *GenerateUploadAvatarUrlReq, opts ...grpc.CallOption) (*GenerateUploadAvatarUrlReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateUploadAvatarUrlReply)
	err := c.cc.Invoke(ctx, WaffleInterface_GenerateUploadAvatarUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waffleInterfaceClient) VerifyImagesUpload(ctx context.Context, in *VerifyImagesUploadReq, opts ...grpc.CallOption) (*VerifyImagesUploadReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyImagesUploadReply)
	err := c.cc.Invoke(ctx, WaffleInterface_VerifyImagesUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waffleInterfaceClient) VerifyAvatarUpload(ctx context.Context, in *VerifyAvatarUploadReq, opts ...grpc.CallOption) (*VerifyAvatarUploadReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyAvatarUploadReply)
	err := c.cc.Invoke(ctx, WaffleInterface_VerifyAvatarUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waffleInterfaceClient) GetImage(ctx context.Context, in *GetImageReq, opts ...grpc.CallOption) (*GetImageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImageReply)
	err := c.cc.Invoke(ctx, WaffleInterface_GetImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waffleInterfaceClient) AddImageTag(ctx context.Context, in *AddImageTagReq, opts ...grpc.CallOption) (*AddImageTagReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddImageTagReply)
	err := c.cc.Invoke(ctx, WaffleInterface_AddImageTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waffleInterfaceClient) SearchImageTagByNameLike(ctx context.Context, in *SearchImageTagByNameLikeReq, opts ...grpc.CallOption) (*SearchImageTagByNameLikeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchImageTagByNameLikeReply)
	err := c.cc.Invoke(ctx, WaffleInterface_SearchImageTagByNameLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waffleInterfaceClient) ReloadCategoryRedisImageTag(ctx context.Context, in *ReloadCategoryRedisImageTagReq, opts ...grpc.CallOption) (*ReloadCategoryRedisImageTagReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReloadCategoryRedisImageTagReply)
	err := c.cc.Invoke(ctx, WaffleInterface_ReloadCategoryRedisImageTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WaffleInterfaceServer is the server API for WaffleInterface service.
// All implementations must embed UnimplementedWaffleInterfaceServer
// for forward compatibility.
type WaffleInterfaceServer interface {
	//user
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
	Login(context.Context, *LoginReq) (*LoginReply, error)
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
	Ping(context.Context, *PingReq) (*PingReply, error)
	PingRPC(context.Context, *PingRPCReq) (*PingRPCReply, error)
	// media
	GenerateUploadImgUrl(context.Context, *GenerateUploadImgUrlReq) (*GenerateUploadImgUrlReply, error)
	GenerateUploadAvatarUrl(context.Context, *GenerateUploadAvatarUrlReq) (*GenerateUploadAvatarUrlReply, error)
	VerifyImagesUpload(context.Context, *VerifyImagesUploadReq) (*VerifyImagesUploadReply, error)
	VerifyAvatarUpload(context.Context, *VerifyAvatarUploadReq) (*VerifyAvatarUploadReply, error)
	GetImage(context.Context, *GetImageReq) (*GetImageReply, error)
	// image - tag
	AddImageTag(context.Context, *AddImageTagReq) (*AddImageTagReply, error)
	SearchImageTagByNameLike(context.Context, *SearchImageTagByNameLikeReq) (*SearchImageTagByNameLikeReply, error)
	ReloadCategoryRedisImageTag(context.Context, *ReloadCategoryRedisImageTagReq) (*ReloadCategoryRedisImageTagReply, error)
	mustEmbedUnimplementedWaffleInterfaceServer()
}

// UnimplementedWaffleInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWaffleInterfaceServer struct{}

func (UnimplementedWaffleInterfaceServer) Register(context.Context, *RegisterReq) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedWaffleInterfaceServer) Login(context.Context, *LoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedWaffleInterfaceServer) Logout(context.Context, *LogoutReq) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedWaffleInterfaceServer) Ping(context.Context, *PingReq) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedWaffleInterfaceServer) PingRPC(context.Context, *PingRPCReq) (*PingRPCReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingRPC not implemented")
}
func (UnimplementedWaffleInterfaceServer) GenerateUploadImgUrl(context.Context, *GenerateUploadImgUrlReq) (*GenerateUploadImgUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateUploadImgUrl not implemented")
}
func (UnimplementedWaffleInterfaceServer) GenerateUploadAvatarUrl(context.Context, *GenerateUploadAvatarUrlReq) (*GenerateUploadAvatarUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateUploadAvatarUrl not implemented")
}
func (UnimplementedWaffleInterfaceServer) VerifyImagesUpload(context.Context, *VerifyImagesUploadReq) (*VerifyImagesUploadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyImagesUpload not implemented")
}
func (UnimplementedWaffleInterfaceServer) VerifyAvatarUpload(context.Context, *VerifyAvatarUploadReq) (*VerifyAvatarUploadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAvatarUpload not implemented")
}
func (UnimplementedWaffleInterfaceServer) GetImage(context.Context, *GetImageReq) (*GetImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedWaffleInterfaceServer) AddImageTag(context.Context, *AddImageTagReq) (*AddImageTagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddImageTag not implemented")
}
func (UnimplementedWaffleInterfaceServer) SearchImageTagByNameLike(context.Context, *SearchImageTagByNameLikeReq) (*SearchImageTagByNameLikeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchImageTagByNameLike not implemented")
}
func (UnimplementedWaffleInterfaceServer) ReloadCategoryRedisImageTag(context.Context, *ReloadCategoryRedisImageTagReq) (*ReloadCategoryRedisImageTagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadCategoryRedisImageTag not implemented")
}
func (UnimplementedWaffleInterfaceServer) mustEmbedUnimplementedWaffleInterfaceServer() {}
func (UnimplementedWaffleInterfaceServer) testEmbeddedByValue()                         {}

// UnsafeWaffleInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WaffleInterfaceServer will
// result in compilation errors.
type UnsafeWaffleInterfaceServer interface {
	mustEmbedUnimplementedWaffleInterfaceServer()
}

func RegisterWaffleInterfaceServer(s grpc.ServiceRegistrar, srv WaffleInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedWaffleInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WaffleInterface_ServiceDesc, srv)
}

func _WaffleInterface_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaffleInterfaceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaffleInterface_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaffleInterfaceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaffleInterface_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaffleInterfaceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaffleInterface_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaffleInterfaceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaffleInterface_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaffleInterfaceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaffleInterface_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaffleInterfaceServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaffleInterface_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaffleInterfaceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaffleInterface_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaffleInterfaceServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaffleInterface_PingRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRPCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaffleInterfaceServer).PingRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaffleInterface_PingRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaffleInterfaceServer).PingRPC(ctx, req.(*PingRPCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaffleInterface_GenerateUploadImgUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateUploadImgUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaffleInterfaceServer).GenerateUploadImgUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaffleInterface_GenerateUploadImgUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaffleInterfaceServer).GenerateUploadImgUrl(ctx, req.(*GenerateUploadImgUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaffleInterface_GenerateUploadAvatarUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateUploadAvatarUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaffleInterfaceServer).GenerateUploadAvatarUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaffleInterface_GenerateUploadAvatarUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaffleInterfaceServer).GenerateUploadAvatarUrl(ctx, req.(*GenerateUploadAvatarUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaffleInterface_VerifyImagesUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyImagesUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaffleInterfaceServer).VerifyImagesUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaffleInterface_VerifyImagesUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaffleInterfaceServer).VerifyImagesUpload(ctx, req.(*VerifyImagesUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaffleInterface_VerifyAvatarUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAvatarUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaffleInterfaceServer).VerifyAvatarUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaffleInterface_VerifyAvatarUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaffleInterfaceServer).VerifyAvatarUpload(ctx, req.(*VerifyAvatarUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaffleInterface_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaffleInterfaceServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaffleInterface_GetImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaffleInterfaceServer).GetImage(ctx, req.(*GetImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaffleInterface_AddImageTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddImageTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaffleInterfaceServer).AddImageTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaffleInterface_AddImageTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaffleInterfaceServer).AddImageTag(ctx, req.(*AddImageTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaffleInterface_SearchImageTagByNameLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchImageTagByNameLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaffleInterfaceServer).SearchImageTagByNameLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaffleInterface_SearchImageTagByNameLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaffleInterfaceServer).SearchImageTagByNameLike(ctx, req.(*SearchImageTagByNameLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaffleInterface_ReloadCategoryRedisImageTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadCategoryRedisImageTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaffleInterfaceServer).ReloadCategoryRedisImageTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WaffleInterface_ReloadCategoryRedisImageTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaffleInterfaceServer).ReloadCategoryRedisImageTag(ctx, req.(*ReloadCategoryRedisImageTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WaffleInterface_ServiceDesc is the grpc.ServiceDesc for WaffleInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WaffleInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "waffle.interface.v1.WaffleInterface",
	HandlerType: (*WaffleInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _WaffleInterface_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _WaffleInterface_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _WaffleInterface_Logout_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _WaffleInterface_Ping_Handler,
		},
		{
			MethodName: "PingRPC",
			Handler:    _WaffleInterface_PingRPC_Handler,
		},
		{
			MethodName: "GenerateUploadImgUrl",
			Handler:    _WaffleInterface_GenerateUploadImgUrl_Handler,
		},
		{
			MethodName: "GenerateUploadAvatarUrl",
			Handler:    _WaffleInterface_GenerateUploadAvatarUrl_Handler,
		},
		{
			MethodName: "VerifyImagesUpload",
			Handler:    _WaffleInterface_VerifyImagesUpload_Handler,
		},
		{
			MethodName: "VerifyAvatarUpload",
			Handler:    _WaffleInterface_VerifyAvatarUpload_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _WaffleInterface_GetImage_Handler,
		},
		{
			MethodName: "AddImageTag",
			Handler:    _WaffleInterface_AddImageTag_Handler,
		},
		{
			MethodName: "SearchImageTagByNameLike",
			Handler:    _WaffleInterface_SearchImageTagByNameLike_Handler,
		},
		{
			MethodName: "ReloadCategoryRedisImageTag",
			Handler:    _WaffleInterface_ReloadCategoryRedisImageTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/waffle_interface.proto",
}
